{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","types/Helpers/helpers.ts","App.tsx","index.tsx"],"names":["TodoList","memo","todos","setSelectedTodo","selectedTodo","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","query","setQuery","isTodoCompleted","setIsTodoComlpeted","value","onChange","event","target","placeholder","normalizedQuery","toLowerCase","trim","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","status","statusText","json","TodoModal","useState","user","setUser","useEffect","userId","foundUser","href","email","name","filterTodosByStatus","todoStatus","filter","App","setTodos","isLoading","setIsLoading","allTodos","finally","visibleTodos","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b0ad0b7.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr key={todo.id} data-cy=\"todo\" className=\"\">\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {!todo.completed\n              ? <td className=\"is-vcentered\" />\n              : (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              )}\n\n            <td className=\"is-vcentered is-expanded\">\n\n              <p className={cn(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn('far',\n                    {\n                      'fa-eye': selectedTodo === null\n                      || selectedTodo.id !== todo.id,\n                    },\n                    {\n                      'fa-eye-slash': selectedTodo !== null\n                      && selectedTodo.id === todo.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\n\ntype Props = {\n  query: string;\n  setQuery: (searchQuery: string) => void;\n  isTodoCompleted: string;\n  setIsTodoComlpeted: (status: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  query,\n  setQuery,\n  isTodoCompleted,\n  setIsTodoComlpeted,\n}) => {\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const normalizedQuery = event.target.value.toLowerCase().trim();\n\n    setQuery(normalizedQuery);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setIsTodoComlpeted(event.target.value);\n  };\n\n  const handleClearButton = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={isTodoCompleted}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query !== ''\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleClearButton}\n              />\n            )}\n\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to upload data: ${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number | null) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = memo(({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(foundUser => setUser(foundUser));\n  }, []);\n\n  const handleCloseButton = () => {\n    setSelectedTodo(null);\n    setUser(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user === null ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { Todo } from '../Todo';\n\nexport const filterTodosByStatus = (todos: Todo[], todoStatus: boolean) => (\n  todos.filter(todo => todo.completed === todoStatus)\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { filterTodosByStatus } from './types/Helpers/helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [query, setQuery] = useState('');\n  const [isTodoCompleted, setIsTodoComlpeted] = useState('all');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(allTodos => setTodos(allTodos))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  let visibleTodos = [...todos];\n\n  if (query) {\n    visibleTodos = visibleTodos.filter(todo => todo.title.toLowerCase().includes(query));\n  }\n\n  if (isTodoCompleted === 'completed') {\n    visibleTodos = filterTodosByStatus(visibleTodos, true);\n  }\n\n  if (isTodoCompleted === 'active') {\n    visibleTodos = filterTodosByStatus(visibleTodos, false);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                isTodoCompleted={isTodoCompleted}\n                setIsTodoComlpeted={setIsTodoComlpeted}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              <TodoList\n                todos={visibleTodos}\n                setSelectedTodo={setSelectedTodo}\n                selectedTodo={selectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo !== null\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            setSelectedTodo={setSelectedTodo}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}