{"version":3,"sources":["types/FilterType.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","types/Helpers/helpers.ts","index.tsx"],"names":["FilterType","TodoInfo","todo","setSelectedTodo","selectedTodo","isSelected","id","className","completed","cn","title","type","onClick","TodoList","memo","todos","map","TodoFilter","query","setQuery","applyQuery","filterType","setFilterType","value","onChange","event","target","Object","entries","label","placeholder","normalizedQuery","toLowerCase","trim","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","status","statusText","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","foundUser","href","email","name","App","setTodos","appliedQuery","setAppliedQuery","All","allTodos","finally","useCallback","f","timerId","clearTimeout","args","debounce","visibleTodos","useMemo","selectedOption","searchQuery","filter","isTodoIncluded","includes","Active","Completed","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a63d3bb.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  setSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  const isSelected = selectedTodo ? selectedTodo.id === todo.id : false;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{todo.id}</td>\n      {!todo.completed\n        ? <td className=\"is-vcentered\" />\n        : (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        )}\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn(\n          { 'has-text-success': todo.completed },\n          { 'has-text-danger': !todo.completed },\n        )}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far',\n              { 'fa-eye': !isSelected },\n              { 'fa-eye-slash': isSelected })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { memo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <TodoInfo\n            todo={todo}\n            setSelectedTodo={setSelectedTodo}\n            selectedTodo={selectedTodo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  query: string;\n  setQuery: (searchQuery: string) => void;\n  applyQuery: (searchQuery: string) => void;\n  filterType: FilterType;\n  setFilterType: (status: FilterType) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  query,\n  setQuery,\n  applyQuery,\n  filterType,\n  setFilterType,\n}) => {\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const normalizedQuery = event.target.value.toLowerCase().trim();\n\n    setQuery(event.target.value);\n    applyQuery(normalizedQuery);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterType(event.target.value as FilterType);\n  };\n\n  const handleClearButton = () => {\n    setQuery('');\n    applyQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleSelect}\n          >\n            {Object.entries(FilterType).map(([label, value]) => (\n              <option\n                key={label}\n                value={value}\n              >\n                {label}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n            && (\n              <button\n                aria-label=\"clearSearchButton\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleClearButton}\n              />\n            )}\n\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to upload data: ${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number | null) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = memo(({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(foundUser => {\n        setUser(foundUser);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleCloseButton = () => {\n    setSelectedTodo(null);\n    setUser(null);\n    setIsLoading(true);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            <button\n              aria-label=\"closeModal\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { debounce, filterTodos } from './types/Helpers/helpers';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(allTodos => setTodos(allTodos))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 500),\n    [],\n  );\n\n  const visibleTodos = useMemo(() => filterTodos(todos, filterType, appliedQuery), [appliedQuery, filterType, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                applyQuery={applyQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {!isLoading\n                && (\n                  <TodoList\n                    todos={visibleTodos}\n                    setSelectedTodo={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            setSelectedTodo={setSelectedTodo}\n          />\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../Todo';\nimport { FilterType } from '../FilterType';\n\nexport const filterTodosByStatus = (todos: Todo[], todoStatus: boolean) => (\n  todos.filter(todo => todo.completed === todoStatus)\n);\n\nexport const debounce = (\n  f: React.Dispatch<React.SetStateAction<string>>,\n  delay:number,\n) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const filterTodos = (\n  todos: Todo[],\n  selectedOption: FilterType,\n  searchQuery: string,\n) => {\n  return todos.filter(todo => {\n    const isTodoIncluded = todo.title.toLowerCase().includes(searchQuery);\n\n    switch (selectedOption) {\n      case FilterType.All:\n        return isTodoIncluded;\n\n      case FilterType.Active:\n        return isTodoIncluded && !todo.completed;\n\n      case FilterType.Completed:\n        return isTodoIncluded && todo.completed;\n\n      default:\n        throw new Error('Unable to filter todos');\n    }\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}